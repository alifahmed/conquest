/*
[1] weight: 0 distance: 268435455
(assert (= mf    (bv-extract 28 27 IR ))) ;0

[2] weight: 0 distance: 268435455
(assert (= df    (bv-extract 26 24 IR ))) ;1

[3] weight: 0 distance: 268435455
(assert (= ff    (bv-extract 22 19 IR ))) ;2

[4] weight: 0 distance: 268435455
(assert (= cf    (bv-extract 23 23 IR ))) ;3

[5] weight: 0 distance: 268435455
(assert (= tail    (bv-extract 19 0 IR ))) ;4

[6] weight: 0 distance: 268435455
(assert (= s    (bv-extract 30 29 IR ))) ;5

[7] weight: 1 distance: 5
[S] 8 9
[P] 10

[8] weight: 0 distance: 4
(assert (= (bv-comp reset  0b1)   0b1)) ;6
(assert (= IR    0b0000000000000000000000000000000)) ;8
(assert (= d    0b00)) ;9
(assert (= rx    0b0000000000000000000000000000000)) ;10
(assert (= m    0b0000000000000000000000000000000)) ;11
(assert (= B    0b0)) ;12
(assert (= reg0    0b0000000000000000000000000000000)) ;13
(assert (= reg1    0b0000000000000000000000000000000)) ;14
(assert (= reg2    0b0000000000000000000000000000000)) ;15
(assert (= reg3    0b0000000000000000000000000000000)) ;16
(assert (= addr    0b00000000000000000000)) ;17
(assert (= rd    0b0)) ;18
(assert (= wr    0b0)) ;19
(assert (= datao    0b0000000000000000000000000000000)) ;20
(assert (= state    0b0)) ;21
[S] 10
[P] 7

[9] weight: 1 distance: 268435455
(assert (= (bv-comp reset  0b1)   0b0)) ;7
[S] 12 18
[P] 7

[10] weight: 0 distance: 5
[P] 8 11

[11] weight: 0 distance: 5
[S] 10
[P] 13 19

[12] weight: 1 distance: 4
(assert (= state    0b0)) ;22
(assert (= addr    (bv-extract 19 0 reg3 ))) ;23
(assert (= rd    0b1)) ;24
(assert (= IR    datai )) ;25
(assert (= state    0b1)) ;26
[S] 17 14 15 16
[P] 8 19

[13] weight: 0 distance: 5
[S] 11
[P] 17 14 15 16

[14] weight: 0 distance: 5
(assert (= (bv-extract 30 29 datai )   0b00)) ;27
(assert (= rx    reg0 )) ;28
[S] 13
[P] 12

[15] weight: 0 distance: 5
(assert (= (bv-extract 30 29 datai )   0b01)) ;29
(assert (= rx    reg1 )) ;30
[S] 13
[P] 12

[16] weight: 0 distance: 5
(assert (= (bv-extract 30 29 datai )   0b10)) ;31
(assert (= rx    reg2 )) ;32
[S] 13
[P] 12

[17] weight: 0 distance: 5
(assert (= (bv-extract 30 29 datai )   0b11)) ;33
(assert (= rx    reg3 )) ;34
[S] 13
[P] 12

[18] weight: 1 distance: 3
(assert (= state    0b1)) ;35
[S] 20 103
[P] 12

[19] weight: 0 distance: 4
(assert (= state    0b0)) ;455
[S] 11
[P] 26 106

[20] weight: 1 distance: 7
(assert (= cf    0b1)) ;36
[S] 22 23 24 25
[P] 18

[21] weight: 1 distance: 6
[S] 31 27 35 81 39 43 47 51 96 58 65 69 73 77 85 89
[P] 22 23 24 25

[22] weight: 0 distance: 6
(assert (= mf    0b00)) ;37
(assert (= m    (bv-concat 0b00000000000 tail ))) ;38
[S] 21
[P] 20

[23] weight: 0 distance: 6
(assert (= mf    0b01)) ;39
(assert (= m    datai )) ;40
(assert (= addr    tail )) ;41
(assert (= rd    0b1)) ;42
[S] 21
[P] 20

[24] weight: 0 distance: 6
(assert (= mf    0b10)) ;43
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;44
(assert (= rd    0b1)) ;45
(assert (= m    datai )) ;46
[S] 21
[P] 20

[25] weight: 0 distance: 6
(assert (= mf    0b11)) ;47
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;48
(assert (= rd    0b1)) ;49
(assert (= m    datai )) ;50
[S] 21
[P] 20

[26] weight: 0 distance: 4
[S] 19
[P] 30 34 38 42 46 50 57 64 68 72 76 80 84 88 95 102

[27] weight: 1 distance: 5
(assert (= ff    0b0000)) ;51
[S] 28 29
[P] 21

[28] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-lt rx  m ))   0b1)) ;52
(assert (= B    0b1)) ;54
[S] 30
[P] 27

[29] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-lt rx  m ))   0b0)) ;53
(assert (= B    0b0)) ;55
[S] 30
[P] 27

[30] weight: 0 distance: 4
[S] 26
[P] 28 29

[31] weight: 1 distance: 5
(assert (= ff    0b0001)) ;56
[S] 32 33
[P] 21

[32] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-ge rx  m ))   0b1)) ;57
(assert (= B    0b1)) ;59
[S] 34
[P] 31

[33] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-ge rx  m ))   0b0)) ;58
(assert (= B    0b0)) ;60
[S] 34
[P] 31

[34] weight: 0 distance: 4
[S] 26
[P] 32 33

[35] weight: 1 distance: 5
(assert (= ff    0b0010)) ;61
[S] 36 37
[P] 21

[36] weight: 0 distance: 4
(assert (= (bv-comp rx  m )   0b1)) ;62
(assert (= B    0b1)) ;64
[S] 38
[P] 35

[37] weight: 0 distance: 4
(assert (= (bv-comp rx  m )   0b0)) ;63
(assert (= B    0b0)) ;65
[S] 38
[P] 35

[38] weight: 0 distance: 4
[S] 26
[P] 36 37

[39] weight: 1 distance: 5
(assert (= ff    0b0011)) ;66
[S] 40 41
[P] 21

[40] weight: 0 distance: 4
(assert (= (bv-not (bv-comp rx  m ))   0b1)) ;67
(assert (= B    0b1)) ;69
[S] 42
[P] 39

[41] weight: 0 distance: 4
(assert (= (bv-not (bv-comp rx  m ))   0b0)) ;68
(assert (= B    0b0)) ;70
[S] 42
[P] 39

[42] weight: 0 distance: 4
[S] 26
[P] 40 41

[43] weight: 1 distance: 5
(assert (= ff    0b0100)) ;71
[S] 44 45
[P] 21

[44] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-le rx  m ))   0b1)) ;72
(assert (= B    0b1)) ;74
[S] 46
[P] 43

[45] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-le rx  m ))   0b0)) ;73
(assert (= B    0b0)) ;75
[S] 46
[P] 43

[46] weight: 0 distance: 4
[S] 26
[P] 44 45

[47] weight: 1 distance: 5
(assert (= ff    0b0101)) ;76
[S] 48 49
[P] 21

[48] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-gt rx  m ))   0b1)) ;77
(assert (= B    0b1)) ;79
[S] 50
[P] 47

[49] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-gt rx  m ))   0b0)) ;78
(assert (= B    0b0)) ;80
[S] 50
[P] 47

[50] weight: 0 distance: 4
[S] 26
[P] 48 49

[51] weight: 1 distance: 6
(assert (= ff    0b0110)) ;81
[S] 52 53
[P] 21

[52] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b1)) ;82
(assert (= rx    rx )) ;84
[S] 54
[P] 51

[53] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b0)) ;83
[S] 54
[P] 51

[54] weight: 1 distance: 5
[S] 55 56
[P] 52 53

[55] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-lt rx  m ))   0b1)) ;85
(assert (= B    0b1)) ;87
[S] 57
[P] 54

[56] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-lt rx  m ))   0b0)) ;86
(assert (= B    0b0)) ;88
[S] 57
[P] 54

[57] weight: 0 distance: 4
[S] 26
[P] 55 56

[58] weight: 1 distance: 6
(assert (= ff    0b0111)) ;89
[S] 59 60
[P] 21

[59] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b1)) ;90
(assert (= rx    rx )) ;92
[S] 61
[P] 58

[60] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b0)) ;91
[S] 61
[P] 58

[61] weight: 1 distance: 5
[S] 62 63
[P] 59 60

[62] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-ge rx  m ))   0b1)) ;93
(assert (= B    0b1)) ;95
[S] 64
[P] 61

[63] weight: 0 distance: 4
(assert (= (bool-to-bv (bv-ge rx  m ))   0b0)) ;94
(assert (= B    0b0)) ;96
[S] 64
[P] 61

[64] weight: 0 distance: 4
[S] 26
[P] 62 63

[65] weight: 1 distance: 5
(assert (= ff    0b1000)) ;97
[S] 66 67
[P] 21

[66] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-lt rx  m )) (bv-comp B  0b1))   0b1)) ;98
(assert (= B    0b1)) ;100
[S] 68
[P] 65

[67] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-lt rx  m )) (bv-comp B  0b1))   0b0)) ;99
(assert (= B    0b0)) ;101
[S] 68
[P] 65

[68] weight: 0 distance: 4
[S] 26
[P] 66 67

[69] weight: 1 distance: 5
(assert (= ff    0b1001)) ;102
[S] 70 71
[P] 21

[70] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-lt rx  m )))) (bv-comp B  0b1))   0b1)) ;103
(assert (= B    0b1)) ;105
[S] 72
[P] 69

[71] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-lt rx  m )))) (bv-comp B  0b1))   0b0)) ;104
(assert (= B    0b0)) ;106
[S] 72
[P] 69

[72] weight: 0 distance: 4
[S] 26
[P] 70 71

[73] weight: 1 distance: 5
(assert (= ff    0b1010)) ;107
[S] 74 75
[P] 21

[74] weight: 0 distance: 4
(assert (= (bv-or (bv-comp rx  m ) (bv-comp B  0b1))   0b1)) ;108
(assert (= B    0b1)) ;110
[S] 76
[P] 73

[75] weight: 0 distance: 4
(assert (= (bv-or (bv-comp rx  m ) (bv-comp B  0b1))   0b0)) ;109
(assert (= B    0b0)) ;111
[S] 76
[P] 73

[76] weight: 0 distance: 4
[S] 26
[P] 74 75

[77] weight: 1 distance: 5
(assert (= ff    0b1011)) ;112
[S] 78 79
[P] 21

[78] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bv-comp rx  m ))) (bv-comp B  0b1))   0b1)) ;113
(assert (= B    0b1)) ;115
[S] 80
[P] 77

[79] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bv-comp rx  m ))) (bv-comp B  0b1))   0b0)) ;114
(assert (= B    0b0)) ;116
[S] 80
[P] 77

[80] weight: 0 distance: 4
[S] 26
[P] 78 79

[81] weight: 1 distance: 5
(assert (= ff    0b1100)) ;117
[S] 82 83
[P] 21

[82] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-gt rx  m )))) (bv-comp B  0b1))   0b1)) ;118
(assert (= B    0b1)) ;120
[S] 84
[P] 81

[83] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-gt rx  m )))) (bv-comp B  0b1))   0b0)) ;119
(assert (= B    0b0)) ;121
[S] 84
[P] 81

[84] weight: 0 distance: 4
[S] 26
[P] 82 83

[85] weight: 1 distance: 5
(assert (= ff    0b1101)) ;122
[S] 86 87
[P] 21

[86] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-gt rx  m )) (bv-comp B  0b1))   0b1)) ;123
(assert (= B    0b1)) ;125
[S] 88
[P] 85

[87] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-gt rx  m )) (bv-comp B  0b1))   0b0)) ;124
(assert (= B    0b0)) ;126
[S] 88
[P] 85

[88] weight: 0 distance: 4
[S] 26
[P] 86 87

[89] weight: 1 distance: 6
(assert (= ff    0b1110)) ;127
[S] 90 91
[P] 21

[90] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b1)) ;128
(assert (= rx    rx )) ;130
[S] 92
[P] 89

[91] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b0)) ;129
[S] 92
[P] 89

[92] weight: 1 distance: 5
[S] 93 94
[P] 90 91

[93] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-lt rx  m )) (bv-comp B  0b1))   0b1)) ;131
(assert (= B    0b1)) ;133
[S] 95
[P] 92

[94] weight: 0 distance: 4
(assert (= (bv-or (bool-to-bv (bv-lt rx  m )) (bv-comp B  0b1))   0b0)) ;132
(assert (= B    0b0)) ;134
[S] 95
[P] 92

[95] weight: 0 distance: 4
[S] 26
[P] 93 94

[96] weight: 1 distance: 6
(assert (= ff    0b1111)) ;135
[S] 97 98
[P] 21

[97] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b1)) ;136
(assert (= rx    rx )) ;138
[S] 99
[P] 96

[98] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt rx  0b0111111111111111111111111111111))   0b0)) ;137
[S] 99
[P] 96

[99] weight: 1 distance: 5
[S] 100 101
[P] 97 98

[100] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-lt rx  m )))) (bv-comp B  0b1))   0b1)) ;139
(assert (= B    0b1)) ;141
[S] 102
[P] 99

[101] weight: 0 distance: 4
(assert (= (bv-or (bv-not (bv-redor (bool-to-bv (bv-lt rx  m )))) (bv-comp B  0b1))   0b0)) ;140
(assert (= B    0b0)) ;142
[S] 102
[P] 99

[102] weight: 0 distance: 4
[S] 26
[P] 100 101

[103] weight: 1 distance: 2
(assert (= cf    0b0)) ;143
[S] 104 105
[P] 18

[104] weight: 1 distance: 7
(assert (= (bv-not (bv-comp df  0b111))   0b1)) ;144
[S] 107 108
[P] 103

[105] weight: 1 distance: 1
(assert (= (bv-not (bv-comp df  0b111))   0b0)) ;145
[S] 252 253
[P] 103

[106] weight: 0 distance: 4
[S] 19
[P] 110 254

[107] weight: 0 distance: 6
(assert (= (bv-or (bv-and (bv-comp df  0b101) (bv-comp B  0b0)) (bv-and (bv-comp df  0b100) (bv-comp B  0b1)))   0b1)) ;146
(assert (= d    0b11)) ;148
[S] 109
[P] 104

[108] weight: 0 distance: 6
(assert (= (bv-or (bv-and (bv-comp df  0b101) (bv-comp B  0b0)) (bv-and (bv-comp df  0b100) (bv-comp B  0b1)))   0b0)) ;147
(assert (= d    (bv-extract 1 0 df ))) ;149
[S] 109
[P] 104

[109] weight: 1 distance: 6
[S] 111 122 128 139 150 161 172 183 194 205 216 227 238
[P] 107 108

[110] weight: 0 distance: 4
[S] 106
[P] 117 123 134 145 156 167 178 189 200 211 222 233 247

[111] weight: 1 distance: 6
(assert (= ff    0b0000)) ;150
[S] 113 114 115 116
[P] 109

[112] weight: 1 distance: 5
(assert (= t    0b0000000000000000000000000000000)) ;165
[S] 118 119 120 121
[P] 113 114 115 116

[113] weight: 0 distance: 5
(assert (= mf    0b00)) ;151
(assert (= m    (bv-concat 0b00000000000 tail ))) ;152
[S] 112
[P] 111

[114] weight: 0 distance: 5
(assert (= mf    0b01)) ;153
(assert (= m    datai )) ;154
(assert (= addr    tail )) ;155
(assert (= rd    0b1)) ;156
[S] 112
[P] 111

[115] weight: 0 distance: 5
(assert (= mf    0b10)) ;157
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;158
(assert (= rd    0b1)) ;159
(assert (= m    datai )) ;160
[S] 112
[P] 111

[116] weight: 0 distance: 5
(assert (= mf    0b11)) ;161
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;162
(assert (= rd    0b1)) ;163
(assert (= m    datai )) ;164
[S] 112
[P] 111

[117] weight: 0 distance: 4
[S] 110
[P] 118 119 120 121

[118] weight: 0 distance: 4
(assert (= d    0b00)) ;166
(assert (= reg0    (bv-sub t  m ))) ;167
[S] 117
[P] 112

[119] weight: 0 distance: 4
(assert (= d    0b01)) ;168
(assert (= reg1    (bv-sub t  m ))) ;169
[S] 117
[P] 112

[120] weight: 0 distance: 4
(assert (= d    0b10)) ;170
(assert (= reg2    (bv-sub t  m ))) ;171
[S] 117
[P] 112

[121] weight: 0 distance: 4
(assert (= d    0b11)) ;172
(assert (= reg3    (bv-sub t  m ))) ;173
[S] 117
[P] 112

[122] weight: 1 distance: 5
(assert (= ff    0b0001)) ;174
[S] 124 125 126 127
[P] 109

[123] weight: 0 distance: 4
(assert (= reg2    reg3 )) ;189
(assert (= reg3    m )) ;190
[S] 110
[P] 124 125 126 127

[124] weight: 0 distance: 4
(assert (= mf    0b00)) ;175
(assert (= m    (bv-concat 0b00000000000 tail ))) ;176
[S] 123
[P] 122

[125] weight: 0 distance: 4
(assert (= mf    0b01)) ;177
(assert (= m    datai )) ;178
(assert (= addr    tail )) ;179
(assert (= rd    0b1)) ;180
[S] 123
[P] 122

[126] weight: 0 distance: 4
(assert (= mf    0b10)) ;181
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;182
(assert (= rd    0b1)) ;183
(assert (= m    datai )) ;184
[S] 123
[P] 122

[127] weight: 0 distance: 4
(assert (= mf    0b11)) ;185
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;186
(assert (= rd    0b1)) ;187
(assert (= m    datai )) ;188
[S] 123
[P] 122

[128] weight: 1 distance: 6
(assert (= ff    0b0010)) ;191
[S] 130 131 132 133
[P] 109

[129] weight: 1 distance: 5
[S] 135 136 137 138
[P] 130 131 132 133

[130] weight: 0 distance: 5
(assert (= mf    0b00)) ;192
(assert (= m    (bv-concat 0b00000000000 tail ))) ;193
[S] 129
[P] 128

[131] weight: 0 distance: 5
(assert (= mf    0b01)) ;194
(assert (= m    datai )) ;195
(assert (= addr    tail )) ;196
(assert (= rd    0b1)) ;197
[S] 129
[P] 128

[132] weight: 0 distance: 5
(assert (= mf    0b10)) ;198
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;199
(assert (= rd    0b1)) ;200
(assert (= m    datai )) ;201
[S] 129
[P] 128

[133] weight: 0 distance: 5
(assert (= mf    0b11)) ;202
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;203
(assert (= rd    0b1)) ;204
(assert (= m    datai )) ;205
[S] 129
[P] 128

[134] weight: 0 distance: 4
[S] 110
[P] 135 136 137 138

[135] weight: 0 distance: 4
(assert (= d    0b00)) ;206
(assert (= reg0    m )) ;207
[S] 134
[P] 129

[136] weight: 0 distance: 4
(assert (= d    0b01)) ;208
(assert (= reg1    m )) ;209
[S] 134
[P] 129

[137] weight: 0 distance: 4
(assert (= d    0b10)) ;210
(assert (= reg2    m )) ;211
[S] 134
[P] 129

[138] weight: 0 distance: 4
(assert (= d    0b11)) ;212
(assert (= reg3    m )) ;213
[S] 134
[P] 129

[139] weight: 1 distance: 6
(assert (= ff    0b0011)) ;214
[S] 144 141 142 143
[P] 109

[140] weight: 1 distance: 5
[S] 146 147 148 149
[P] 144 141 142 143

[141] weight: 0 distance: 5
(assert (= mf    0b00)) ;215
(assert (= m    (bv-concat 0b00000000000 tail ))) ;216
[S] 140
[P] 139

[142] weight: 0 distance: 5
(assert (= mf    0b01)) ;217
(assert (= m    datai )) ;218
(assert (= addr    tail )) ;219
(assert (= rd    0b1)) ;220
[S] 140
[P] 139

[143] weight: 0 distance: 5
(assert (= mf    0b10)) ;221
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;222
(assert (= rd    0b1)) ;223
(assert (= m    datai )) ;224
[S] 140
[P] 139

[144] weight: 0 distance: 5
(assert (= mf    0b11)) ;225
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;226
(assert (= rd    0b1)) ;227
(assert (= m    datai )) ;228
[S] 140
[P] 139

[145] weight: 0 distance: 4
[S] 110
[P] 146 147 148 149

[146] weight: 0 distance: 4
(assert (= d    0b00)) ;229
(assert (= reg0    m )) ;230
[S] 145
[P] 140

[147] weight: 0 distance: 4
(assert (= d    0b01)) ;231
(assert (= reg1    m )) ;232
[S] 145
[P] 140

[148] weight: 0 distance: 4
(assert (= d    0b10)) ;233
(assert (= reg2    m )) ;234
[S] 145
[P] 140

[149] weight: 0 distance: 4
(assert (= d    0b11)) ;235
(assert (= reg3    m )) ;236
[S] 145
[P] 140

[150] weight: 1 distance: 6
(assert (= ff    0b0100)) ;237
[S] 152 153 154 155
[P] 109

[151] weight: 1 distance: 5
[S] 159 157 158 160
[P] 152 153 154 155

[152] weight: 0 distance: 5
(assert (= mf    0b00)) ;238
(assert (= m    (bv-concat 0b00000000000 tail ))) ;239
[S] 151
[P] 150

[153] weight: 0 distance: 5
(assert (= mf    0b01)) ;240
(assert (= m    datai )) ;241
(assert (= addr    tail )) ;242
(assert (= rd    0b1)) ;243
[S] 151
[P] 150

[154] weight: 0 distance: 5
(assert (= mf    0b10)) ;244
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;245
(assert (= rd    0b1)) ;246
(assert (= m    datai )) ;247
[S] 151
[P] 150

[155] weight: 0 distance: 5
(assert (= mf    0b11)) ;248
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;249
(assert (= rd    0b1)) ;250
(assert (= m    datai )) ;251
[S] 151
[P] 150

[156] weight: 0 distance: 4
[S] 110
[P] 159 157 158 160

[157] weight: 0 distance: 4
(assert (= d    0b00)) ;252
(assert (= reg0    (bv-add rx  m ))) ;253
[S] 156
[P] 151

[158] weight: 0 distance: 4
(assert (= d    0b01)) ;254
(assert (= reg1    (bv-add rx  m ))) ;255
[S] 156
[P] 151

[159] weight: 0 distance: 4
(assert (= d    0b10)) ;256
(assert (= reg2    (bv-add rx  m ))) ;257
[S] 156
[P] 151

[160] weight: 0 distance: 4
(assert (= d    0b11)) ;258
(assert (= reg3    (bv-add rx  m ))) ;259
[S] 156
[P] 151

[161] weight: 1 distance: 6
(assert (= ff    0b0101)) ;260
[S] 163 164 165 166
[P] 109

[162] weight: 1 distance: 5
[S] 168 169 170 171
[P] 163 164 165 166

[163] weight: 0 distance: 5
(assert (= mf    0b00)) ;261
(assert (= m    (bv-concat 0b00000000000 tail ))) ;262
[S] 162
[P] 161

[164] weight: 0 distance: 5
(assert (= mf    0b01)) ;263
(assert (= m    datai )) ;264
(assert (= addr    tail )) ;265
(assert (= rd    0b1)) ;266
[S] 162
[P] 161

[165] weight: 0 distance: 5
(assert (= mf    0b10)) ;267
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;268
(assert (= rd    0b1)) ;269
(assert (= m    datai )) ;270
[S] 162
[P] 161

[166] weight: 0 distance: 5
(assert (= mf    0b11)) ;271
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;272
(assert (= rd    0b1)) ;273
(assert (= m    datai )) ;274
[S] 162
[P] 161

[167] weight: 0 distance: 4
[S] 110
[P] 168 169 170 171

[168] weight: 0 distance: 4
(assert (= d    0b00)) ;275
(assert (= reg0    (bv-add rx  m ))) ;276
[S] 167
[P] 162

[169] weight: 0 distance: 4
(assert (= d    0b01)) ;277
(assert (= reg1    (bv-add rx  m ))) ;278
[S] 167
[P] 162

[170] weight: 0 distance: 4
(assert (= d    0b10)) ;279
(assert (= reg2    (bv-add rx  m ))) ;280
[S] 167
[P] 162

[171] weight: 0 distance: 4
(assert (= d    0b11)) ;281
(assert (= reg3    (bv-add rx  m ))) ;282
[S] 167
[P] 162

[172] weight: 1 distance: 6
(assert (= ff    0b0110)) ;283
[S] 177 174 175 176
[P] 109

[173] weight: 1 distance: 5
[S] 179 180 181 182
[P] 177 174 175 176

[174] weight: 0 distance: 5
(assert (= mf    0b00)) ;284
(assert (= m    (bv-concat 0b00000000000 tail ))) ;285
[S] 173
[P] 172

[175] weight: 0 distance: 5
(assert (= mf    0b01)) ;286
(assert (= m    datai )) ;287
(assert (= addr    tail )) ;288
(assert (= rd    0b1)) ;289
[S] 173
[P] 172

[176] weight: 0 distance: 5
(assert (= mf    0b10)) ;290
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;291
(assert (= rd    0b1)) ;292
(assert (= m    datai )) ;293
[S] 173
[P] 172

[177] weight: 0 distance: 5
(assert (= mf    0b11)) ;294
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;295
(assert (= rd    0b1)) ;296
(assert (= m    datai )) ;297
[S] 173
[P] 172

[178] weight: 0 distance: 4
[S] 110
[P] 179 180 181 182

[179] weight: 0 distance: 4
(assert (= d    0b00)) ;298
(assert (= reg0    (bv-sub rx  m ))) ;299
[S] 178
[P] 173

[180] weight: 0 distance: 4
(assert (= d    0b01)) ;300
(assert (= reg1    (bv-sub rx  m ))) ;301
[S] 178
[P] 173

[181] weight: 0 distance: 4
(assert (= d    0b10)) ;302
(assert (= reg2    (bv-sub rx  m ))) ;303
[S] 178
[P] 173

[182] weight: 0 distance: 4
(assert (= d    0b11)) ;304
(assert (= reg3    (bv-sub rx  m ))) ;305
[S] 178
[P] 173

[183] weight: 1 distance: 6
(assert (= ff    0b0111)) ;306
[S] 185 186 187 188
[P] 109

[184] weight: 1 distance: 5
[S] 190 191 192 193
[P] 185 186 187 188

[185] weight: 0 distance: 5
(assert (= mf    0b00)) ;307
(assert (= m    (bv-concat 0b00000000000 tail ))) ;308
[S] 184
[P] 183

[186] weight: 0 distance: 5
(assert (= mf    0b01)) ;309
(assert (= m    datai )) ;310
(assert (= addr    tail )) ;311
(assert (= rd    0b1)) ;312
[S] 184
[P] 183

[187] weight: 0 distance: 5
(assert (= mf    0b10)) ;313
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;314
(assert (= rd    0b1)) ;315
(assert (= m    datai )) ;316
[S] 184
[P] 183

[188] weight: 0 distance: 5
(assert (= mf    0b11)) ;317
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;318
(assert (= rd    0b1)) ;319
(assert (= m    datai )) ;320
[S] 184
[P] 183

[189] weight: 0 distance: 4
[S] 110
[P] 190 191 192 193

[190] weight: 0 distance: 4
(assert (= d    0b00)) ;321
(assert (= reg0    (bv-sub rx  m ))) ;322
[S] 189
[P] 184

[191] weight: 0 distance: 4
(assert (= d    0b01)) ;323
(assert (= reg1    (bv-sub rx  m ))) ;324
[S] 189
[P] 184

[192] weight: 0 distance: 4
(assert (= d    0b10)) ;325
(assert (= reg2    (bv-sub rx  m ))) ;326
[S] 189
[P] 184

[193] weight: 0 distance: 4
(assert (= d    0b11)) ;327
(assert (= reg3    (bv-sub rx  m ))) ;328
[S] 189
[P] 184

[194] weight: 1 distance: 6
(assert (= ff    0b1000)) ;329
[S] 196 197 198 199
[P] 109

[195] weight: 1 distance: 5
[S] 201 202 203 204
[P] 196 197 198 199

[196] weight: 0 distance: 5
(assert (= mf    0b00)) ;330
(assert (= m    (bv-concat 0b00000000000 tail ))) ;331
[S] 195
[P] 194

[197] weight: 0 distance: 5
(assert (= mf    0b01)) ;332
(assert (= m    datai )) ;333
(assert (= addr    tail )) ;334
(assert (= rd    0b1)) ;335
[S] 195
[P] 194

[198] weight: 0 distance: 5
(assert (= mf    0b10)) ;336
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;337
(assert (= rd    0b1)) ;338
(assert (= m    datai )) ;339
[S] 195
[P] 194

[199] weight: 0 distance: 5
(assert (= mf    0b11)) ;340
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;341
(assert (= rd    0b1)) ;342
(assert (= m    datai )) ;343
[S] 195
[P] 194

[200] weight: 0 distance: 4
[S] 110
[P] 201 202 203 204

[201] weight: 0 distance: 4
(assert (= d    0b00)) ;344
(assert (= reg0    (bv-add rx  m ))) ;345
[S] 200
[P] 195

[202] weight: 0 distance: 4
(assert (= d    0b01)) ;346
(assert (= reg1    (bv-add rx  m ))) ;347
[S] 200
[P] 195

[203] weight: 0 distance: 4
(assert (= d    0b10)) ;348
(assert (= reg2    (bv-add rx  m ))) ;349
[S] 200
[P] 195

[204] weight: 0 distance: 4
(assert (= d    0b11)) ;350
(assert (= reg3    (bv-add rx  m ))) ;351
[S] 200
[P] 195

[205] weight: 1 distance: 6
(assert (= ff    0b1001)) ;352
[S] 207 208 209 210
[P] 109

[206] weight: 1 distance: 5
[S] 212 213 214 215
[P] 207 208 209 210

[207] weight: 0 distance: 5
(assert (= mf    0b00)) ;353
(assert (= m    (bv-concat 0b00000000000 tail ))) ;354
[S] 206
[P] 205

[208] weight: 0 distance: 5
(assert (= mf    0b01)) ;355
(assert (= m    datai )) ;356
(assert (= addr    tail )) ;357
(assert (= rd    0b1)) ;358
[S] 206
[P] 205

[209] weight: 0 distance: 5
(assert (= mf    0b10)) ;359
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;360
(assert (= rd    0b1)) ;361
(assert (= m    datai )) ;362
[S] 206
[P] 205

[210] weight: 0 distance: 5
(assert (= mf    0b11)) ;363
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;364
(assert (= rd    0b1)) ;365
(assert (= m    datai )) ;366
[S] 206
[P] 205

[211] weight: 0 distance: 4
[S] 110
[P] 212 213 214 215

[212] weight: 0 distance: 4
(assert (= d    0b00)) ;367
(assert (= reg0    (bv-sub rx  m ))) ;368
[S] 211
[P] 206

[213] weight: 0 distance: 4
(assert (= d    0b01)) ;369
(assert (= reg1    (bv-sub rx  m ))) ;370
[S] 211
[P] 206

[214] weight: 0 distance: 4
(assert (= d    0b10)) ;371
(assert (= reg2    (bv-sub rx  m ))) ;372
[S] 211
[P] 206

[215] weight: 0 distance: 4
(assert (= d    0b11)) ;373
(assert (= reg3    (bv-sub rx  m ))) ;374
[S] 211
[P] 206

[216] weight: 1 distance: 6
(assert (= ff    0b1010)) ;375
[S] 218 219 220 221
[P] 109

[217] weight: 1 distance: 5
[S] 223 224 225 226
[P] 218 219 220 221

[218] weight: 0 distance: 5
(assert (= mf    0b00)) ;376
(assert (= m    (bv-concat 0b00000000000 tail ))) ;377
[S] 217
[P] 216

[219] weight: 0 distance: 5
(assert (= mf    0b01)) ;378
(assert (= m    datai )) ;379
(assert (= addr    tail )) ;380
(assert (= rd    0b1)) ;381
[S] 217
[P] 216

[220] weight: 0 distance: 5
(assert (= mf    0b10)) ;382
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;383
(assert (= rd    0b1)) ;384
(assert (= m    datai )) ;385
[S] 217
[P] 216

[221] weight: 0 distance: 5
(assert (= mf    0b11)) ;386
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;387
(assert (= rd    0b1)) ;388
(assert (= m    datai )) ;389
[S] 217
[P] 216

[222] weight: 0 distance: 4
[S] 110
[P] 223 224 225 226

[223] weight: 0 distance: 4
(assert (= d    0b00)) ;390
(assert (= reg0    (bv-add rx  m ))) ;391
[S] 222
[P] 217

[224] weight: 0 distance: 4
(assert (= d    0b01)) ;392
(assert (= reg1    (bv-add rx  m ))) ;393
[S] 222
[P] 217

[225] weight: 0 distance: 4
(assert (= d    0b10)) ;394
(assert (= reg2    (bv-add rx  m ))) ;395
[S] 222
[P] 217

[226] weight: 0 distance: 4
(assert (= d    0b11)) ;396
(assert (= reg3    (bv-add rx  m ))) ;397
[S] 222
[P] 217

[227] weight: 1 distance: 6
(assert (= ff    0b1011)) ;398
[S] 229 230 231 232
[P] 109

[228] weight: 1 distance: 5
[S] 234 235 236 237
[P] 229 230 231 232

[229] weight: 0 distance: 5
(assert (= mf    0b00)) ;399
(assert (= m    (bv-concat 0b00000000000 tail ))) ;400
[S] 228
[P] 227

[230] weight: 0 distance: 5
(assert (= mf    0b01)) ;401
(assert (= m    datai )) ;402
(assert (= addr    tail )) ;403
(assert (= rd    0b1)) ;404
[S] 228
[P] 227

[231] weight: 0 distance: 5
(assert (= mf    0b10)) ;405
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg1 )))) ;406
(assert (= rd    0b1)) ;407
(assert (= m    datai )) ;408
[S] 228
[P] 227

[232] weight: 0 distance: 5
(assert (= mf    0b11)) ;409
(assert (= addr    (bv-add tail  (bv-extract 19 0 reg2 )))) ;410
(assert (= rd    0b1)) ;411
(assert (= m    datai )) ;412
[S] 228
[P] 227

[233] weight: 0 distance: 4
[S] 110
[P] 234 235 236 237

[234] weight: 0 distance: 4
(assert (= d    0b00)) ;413
(assert (= reg0    (bv-sub rx  m ))) ;414
[S] 233
[P] 228

[235] weight: 0 distance: 4
(assert (= d    0b01)) ;415
(assert (= reg1    (bv-sub rx  m ))) ;416
[S] 233
[P] 228

[236] weight: 0 distance: 4
(assert (= d    0b10)) ;417
(assert (= reg2    (bv-sub rx  m ))) ;418
[S] 233
[P] 228

[237] weight: 0 distance: 4
(assert (= d    0b11)) ;419
(assert (= reg3    (bv-sub rx  m ))) ;420
[S] 233
[P] 228

[238] weight: 1 distance: 6
(assert (= ff    0b1100)) ;421
[S] 240 241 242 243
[P] 109

[239] weight: 1 distance: 5
[S] 248 249 250 251
[P] 240 241 242 246

[240] weight: 0 distance: 5
(assert (= mf    0b00)) ;422
(assert (= t    (bv-concat 0b0 (bv-extract 30 1 rx )))) ;423
[S] 239
[P] 238

[241] weight: 0 distance: 5
(assert (= mf    0b01)) ;424
(assert (= t    (bv-concat 0b0 (ite (= (bv-comp B  0b1) 0b1) 0b0 (bv-extract 30 30 rx )) (bv-extract 29 1 rx )))) ;425
[S] 239
[P] 238

[242] weight: 0 distance: 5
(assert (= mf    0b10)) ;426
(assert (= t    (bv-concat (bv-extract 29 0 rx ) 0b0))) ;427
[S] 239
[P] 238

[243] weight: 1 distance: 6
(assert (= mf    0b11)) ;428
(assert (= t    (bv-concat (bv-extract 29 0 rx ) 0b0))) ;429
[S] 244 245
[P] 238

[244] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt t  0b0111111111111111111111111111111))   0b1)) ;430
(assert (= B    0b1)) ;432
[S] 246
[P] 243

[245] weight: 0 distance: 5
(assert (= (bool-to-bv (bv-gt t  0b0111111111111111111111111111111))   0b0)) ;431
(assert (= B    0b0)) ;433
[S] 246
[P] 243

[246] weight: 0 distance: 5
[S] 239
[P] 244 245

[247] weight: 0 distance: 4
[S] 110
[P] 248 249 250 251

[248] weight: 0 distance: 4
(assert (= d    0b00)) ;434
(assert (= reg0    t )) ;435
[S] 247
[P] 239

[249] weight: 0 distance: 4
(assert (= d    0b01)) ;436
(assert (= reg1    t )) ;437
[S] 247
[P] 239

[250] weight: 0 distance: 4
(assert (= d    0b10)) ;438
(assert (= reg2    t )) ;439
[S] 247
[P] 239

[251] weight: 0 distance: 4
(assert (= d    0b11)) ;440
(assert (= reg3    t )) ;441
[S] 247
[P] 239

[252] weight: 1 distance: 5
(assert (= (bv-comp df  0b111)   0b1)) ;442
[S] 258 259 256 257
[P] 105

[253] weight: 0 distance: 0
(assert (= (bv-comp df  0b111)   0b0)) ;443
[S] 254
[P] 105

[254] weight: 0 distance: 4
[S] 106
[P] 253 255

[255] weight: 0 distance: 4
(assert (= addr    (bv-extract 19 0 m ))) ;452
(assert (= wr    0b1)) ;453
(assert (= datao    rx )) ;454
[S] 254
[P] 258 259 256 257

[256] weight: 0 distance: 4
(assert (= mf    0b00)) ;444
(assert (= m    (bv-concat 0b00000000000 tail ))) ;445
[S] 255
[P] 252

[257] weight: 0 distance: 4
(assert (= mf    0b01)) ;446
(assert (= m    (bv-concat 0b00000000000 tail ))) ;447
[S] 255
[P] 252

[258] weight: 0 distance: 4
(assert (= mf    0b10)) ;448
(assert (= m    (bv-add reg1  (bv-concat 0b00000000000 tail )))) ;449
[S] 255
[P] 252

[259] weight: 0 distance: 4
(assert (= mf    0b11)) ;450
(assert (= m    (bv-add reg2  (bv-concat 0b00000000000 tail )))) ;451
[S] 255
[P] 252

*/

//state variables: B rd state wr

