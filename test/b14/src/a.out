/*
 * 1364-1995 Verilog generated by Icarus Verilog VLOG95 Code Generator,
 * Version: 10.0 (stable) (v10_0)
 * Converted using TYPICAL delays and without signed support.
 */

`timescale 1s/1s
/* This module was originally defined in file b14.v at line 16. */
module b14(clock, reset, datai, addr, datao, rd, wr);
  input clock;
  input reset;
  input [30:0] datai;
  output [19:0] addr;
  output [30:0] datao;
  output rd;
  output wr;

  parameter EXEC = 1'b1;
  parameter FETCH = 1'b0;

  reg B;
  reg [30:0] IR;
  reg [19:0] addr;
  wire cf;
  wire clock;
  reg [1:0] d;
  wire [30:0] datai;
  reg [30:0] datao;
  wire [2:0] df;
  wire [3:0] ff;
  reg [30:0] m;
  wire [1:0] mf;
  reg rd;
  reg [30:0] reg0;
  reg [30:0] reg1;
  reg [30:0] reg2;
  reg [30:0] reg3;
  wire reset;
  reg [30:0] rx;
  wire [1:0] s;
  reg state;
  reg [30:0] t;
  wire [19:0] tail;
  reg wr;


  assign mf = IR[28:27];
  assign df = IR[26:24];
  assign ff = IR[22:19];
  assign cf = IR[23];
  assign tail = IR[19:0];
  assign s = IR[30:29];

  always @(posedge clock) if ((reset == 1'b1)) begin
    IR <= 31'h00000000;
    d <= 2'h0;
    rx <= 31'h00000000;
    m <= 31'h00000000;
    B <= 1'b0;
    reg0 <= 31'h00000000;
    reg1 <= 31'h00000000;
    reg2 <= 31'h00000000;
    reg3 <= 31'h00000000;
    addr <= 20'h00000;
    rd <= 1'b0;
    wr <= 1'b0;
    datao <= 31'h00000000;
    state <= FETCH;
  end
  else case (state)
    FETCH: begin
      addr <= reg3[19:0];
      rd <= 1'b1;
      IR <= datai;
      state <= EXEC;
      case (datai[30:29])
        2'h0: rx <= reg0;
        2'h1: rx <= reg1;
        2'h2: rx <= reg2;
        2'h3: rx <= reg3;
      endcase
    end
    EXEC: begin
      case (cf)
        1'b1: begin
          case (mf)
            2'h0: m = {11'h000, tail};
            2'h1: begin
              m = datai;
              addr <= tail;
              rd <= 1'b1;
            end
            2'h2: begin
              addr <= (tail + reg1[19:0]);
              rd <= 1'b1;
              m = datai;
            end
            2'h3: begin
              addr <= (tail + reg2[19:0]);
              rd <= 1'b1;
              m = datai;
            end
          endcase
          case (ff)
            4'h0: if ((rx < m)) B <= 1'b1;
            else B <= 1'b0;
            4'h1: if ((rx >= m)) B <= 1'b1;
            else B <= 1'b0;
            4'h2: if ((rx == m)) B <= 1'b1;
            else B <= 1'b0;
            4'h3: if ((rx != m)) B <= 1'b1;
            else B <= 1'b0;
            4'h4: if ((rx <= m)) B <= 1'b1;
            else B <= 1'b0;
            4'h5: if ((rx > m)) B <= 1'b1;
            else B <= 1'b0;
            4'h6: begin
              if ((rx > 31'h3fffffff)) rx = rx;
              if ((rx < m)) B <= 1'b1;
              else B <= 1'b0;
            end
            4'h7: begin
              if ((rx > 31'h3fffffff)) rx = rx;
              if ((rx >= m)) B <= 1'b1;
              else B <= 1'b0;
            end
            4'h8: if (((rx < m) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'h9: if (((!(rx < m)) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'ha: if (((rx == m) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'hb: if (((!(rx == m)) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'hc: if (((!(rx > m)) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'hd: if (((rx > m) || (B == 1'b1))) B <= 1'b1;
            else B <= 1'b0;
            4'he: begin
              if ((rx > 31'h3fffffff)) rx = rx;
              if (((rx < m) || (B == 1'b1))) B <= 1'b1;
              else B <= 1'b0;
            end
            4'hf: begin
              if ((rx > 31'h3fffffff)) rx = rx;
              if (((!(rx < m)) || (B == 1'b1))) B <= 1'b1;
              else B <= 1'b0;
            end
          endcase
        end
        1'b0: if ((df != 3'h7)) begin
          if ((((df == 3'h5) && (B == 1'b0)) || ((df == 3'h4) && (B == 1'b1)))) d = 2'h3;
          else d = df[1:0];
          case (ff)
            4'h0: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              t = 31'h00000000;
              case (d)
                2'h0: reg0 = (t - m);
                2'h1: reg1 = (t - m);
                2'h2: reg2 = (t - m);
                2'h3: reg3 = (t - m);
              endcase
            end
            4'h1: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              reg2 = reg3;
              reg3 = m;
            end
            4'h2: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = m;
                2'h1: reg1 = m;
                2'h2: reg2 = m;
                2'h3: reg3 = m;
              endcase
            end
            4'h3: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = m;
                2'h1: reg1 = m;
                2'h2: reg2 = m;
                2'h3: reg3 = m;
              endcase
            end
            4'h4: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx + m);
                2'h1: reg1 = (rx + m);
                2'h2: reg2 = (rx + m);
                2'h3: reg3 = (rx + m);
              endcase
            end
            4'h5: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx + m);
                2'h1: reg1 = (rx + m);
                2'h2: reg2 = (rx + m);
                2'h3: reg3 = (rx + m);
              endcase
            end
            4'h6: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx - m);
                2'h1: reg1 = (rx - m);
                2'h2: reg2 = (rx - m);
                2'h3: reg3 = (rx - m);
              endcase
            end
            4'h7: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx - m);
                2'h1: reg1 = (rx - m);
                2'h2: reg2 = (rx - m);
                2'h3: reg3 = (rx - m);
              endcase
            end
            4'h8: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx + m);
                2'h1: reg1 = (rx + m);
                2'h2: reg2 = (rx + m);
                2'h3: reg3 = (rx + m);
              endcase
            end
            4'h9: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx - m);
                2'h1: reg1 = (rx - m);
                2'h2: reg2 = (rx - m);
                2'h3: reg3 = (rx - m);
              endcase
            end
            4'ha: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx + m);
                2'h1: reg1 = (rx + m);
                2'h2: reg2 = (rx + m);
                2'h3: reg3 = (rx + m);
              endcase
            end
            4'hb: begin
              case (mf)
                2'h0: m = {11'h000, tail};
                2'h1: begin
                  m = datai;
                  addr <= tail;
                  rd <= 1'b1;
                end
                2'h2: begin
                  addr <= (tail + reg1[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
                2'h3: begin
                  addr <= (tail + reg2[19:0]);
                  rd <= 1'b1;
                  m = datai;
                end
              endcase
              case (d)
                2'h0: reg0 = (rx - m);
                2'h1: reg1 = (rx - m);
                2'h2: reg2 = (rx - m);
                2'h3: reg3 = (rx - m);
              endcase
            end
            4'hc: begin
              case (mf)
                2'h0: t = {1'b0, rx[30:1]};
                2'h1: t = {1'b0, ((B == 1'b1) ? 1'b0 : rx[30]), rx[29:1]};
                2'h2: t = {rx[29:0], 1'b0};
                2'h3: begin
                  t = {rx[29:0], 1'b0};
                  if ((t > 31'h3fffffff)) B <= 1'b1;
                  else B <= 1'b0;
                end
              endcase
              case (d)
                2'h0: reg0 <= t;
                2'h1: reg1 <= t;
                2'h2: reg2 <= t;
                2'h3: reg3 <= t;
              endcase
            end
          endcase
        end
        else if ((df == 3'h7)) begin
          case (mf)
            2'h0: m = {11'h000, tail};
            2'h1: m = {11'h000, tail};
            2'h2: m = (reg1 + {11'h000, tail});
            2'h3: m = (reg2 + {11'h000, tail});
          endcase
          addr <= m[19:0];
          wr <= 1'b1;
          datao <= rx;
        end
      endcase
      state <= FETCH;
    end
  endcase
endmodule  /* b14 */
